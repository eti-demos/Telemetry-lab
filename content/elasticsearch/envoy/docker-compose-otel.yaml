services:
  envoy-front-proxy:
    build:
      context: .
      dockerfile: ../shared/envoy/Dockerfile
      args:
        ENVOY_CONFIG: envoy-front-proxy.yaml
    networks:
      - otel-envoy
    depends_on:
      # jaeger:
      #   condition: service_healthy
      envoy-1:
        condition: service_started
      envoy-2:
        condition: service_started
    ports:
    - "${PORT_PROXY:-10000}:10000"

  envoy-1:
    build:
      context: .
      dockerfile: ../shared/envoy/Dockerfile
      args:
        ENVOY_CONFIG: envoy-1.yaml
    networks:
      - otel-envoy
    depends_on:
      # jaeger:
      #   condition: service_healthy
      service-1:
        condition: service_healthy
      envoy-2:
        condition: service_started

  envoy-2:
    build:
      context: .
      dockerfile: ../shared/envoy/Dockerfile
      args:
        ENVOY_CONFIG: envoy-2.yaml
    networks:
      - otel-envoy
    depends_on:
      # jaeger:
      #   condition: service_healthy
      service-2:
        condition: service_healthy

  service-1:
    build:
      context: ../shared/python
      target: aiohttp-tracing-service
    networks:
      - otel-envoy
    environment:
    - SERVICE_NAME=1

  service-2:
    build:
      context: ../shared/python
      target: aiohttp-tracing-service
    networks:
      - otel-envoy
    environment:
    - SERVICE_NAME=2

  jaeger-collector:
    image: jaegertracing/opentelemetry-all-in-one:latest
    networks:
      - otel-envoy
    ports:
      - "16686:16686" # api
      - "16685:16685" # jaeger-query service gRPC server
      - "4317:4317" # grpc

  # opentelemetry:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile-opentelemetry
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -sf http://localhost:13133 || exit 1"]
  #     interval: 1s
  #     timeout: 120s
  #     retries: 120
  #     start_period: 5s
  #   command: ["--config=/etc/otel-collector-config.yaml"]
  #   ports:
  #   - "${PORT_UI:-55679}:55679"
networks:
  otel-envoy:
    driver: bridge
